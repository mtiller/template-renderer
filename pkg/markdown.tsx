import React from "react";
import rehypeKatex from "rehype-katex";
import rehypeRaw from "rehype-raw";
import rehypeSanitize, { defaultSchema } from "rehype-sanitize";
import remarkMath from "remark-math";
// import { RenderChart } from "./render-charts";
// import { RenderTable } from "./render-table";
// import { VegaVisuals } from "./vega";
import Markdown, { Options } from "react-markdown";

export type Components = Record<string, React.ComponentType<{}> | string>;

export const MarkdownRenderer = (props: Options) => {
  const components = {
    // chart: RenderChart,
    // constants: RenderTable,
    // vega: VegaVisuals,
  };

  const override = { ...props };
  override.remarkPlugins = [...(props.remarkPlugins ?? []), remarkMath];
  override.rehypePlugins = [
    ...(props.rehypePlugins ?? []),
    rehypeRaw,
    rehypeKatex,
    [rehypeSanitize, mathSanitizeSchema],
  ];

  React.useEffect(() => {
    const w = window as any;
    w?.x3dom?.reload();
  }, [props.children]);
  override.components = { ...props.components, ...(components as any) };

  return <Markdown {...override} />;
};

const coreAttributes = ["id", "tabindex", "class", "style"];
const presentationAttributes = [
  "clippath",
  "cliprule",
  "color",
  "colorinterpolation",
  "colorrendering",
  "cursor",
  "display",
  "fill",
  "opacity",
  "rule",
  "filter",
  "mask",
  "opacity",
  "events",
  "rendering",
  "stroke",
  "strokeWidth",
  "dasharray",
  "dashoffset",
  "style",
  "linecap",
  "linejoin",
  "miterlimit",
  "opacity",
  "width",
  "transform",
  "effect",
  "visibility",
  "marker-start",
  "marker-end",
  "marker-mid",
  "markerstart",
  "markerend",
  "markermid",
  "markerStart",
  "markerEnd",
  "markerMid",
];
const customComponents: Record<string, string[]> = {
  /** Custom Elements */
  chart: ["signals"],
  constants: ["signals"],
  vega: ["spec"],
  /** SVG Tags */
  circle: [
    "cx",
    "cy",
    "r",
    "pathlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  rect: [
    "x",
    "y",
    "width",
    "height",
    "rx",
    "ry",
    "pathlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  use: [
    "x",
    "y",
    "width",
    "height",
    "href",
    "cx",
    "cy",
    "r",
    "rx",
    "ry",
    "pathlength",
    "dx",
    "dy",
    "rotate",
    "lengthadjust",
    "textlength",
    "points",
    "d",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  image: [
    "x",
    "y",
    "width",
    "height",
    "href",
    "preserveaspectratio",
    "crossorigin",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  line: [
    "x1",
    "y1",
    "x2",
    "y2",
    "pathlength",
    "marker*",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  ellipse: [
    "cx",
    "cy",
    "rx",
    "ry",
    "pathlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  g: [...coreAttributes, ...presentationAttributes],
  marker: [
    "markerwidth",
    "markerheight",
    "markerWidth",
    "markerHeight",
    "markerunits",
    "preserveaspectratio",
    "viewbox",
    "refx",
    "refX",
    "refY",
    "refy",
    "orient",
    ...coreAttributes,
  ],
  defs: [...coreAttributes, ...presentationAttributes],
  text: [
    "x",
    "y",
    "dx",
    "dy",
    "rotate",
    "lengthadjust",
    "textlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  symbol: [
    "height",
    "preserveaspectratio",
    "refx",
    "refy",
    "viewbox",
    "width",
    "x",
    "y",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  tspan: [
    "x",
    "y",
    "dx",
    "dy",
    "rotate",
    "lengthadjust",
    "textlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  polygon: [
    "points",
    "pathlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  lineargradient: [
    "gradientunits",
    "gradienttransform",
    "href",
    "spreadmethod",
    "x1",
    "x2",
    "y1",
    "y2",
    ...coreAttributes,
  ],
  radialgradient: [
    "cx",
    "cy",
    "fr",
    "fx",
    "fy",
    "gradientunits",
    "gradienttransform",
    "href",
    "r",
    "spreadmethod",
    ...coreAttributes,
  ],
  stop: ["stop-color", "stopColor", "stop-opacity", "stopOpacity", "offset"],
  textPath: [
    "href",
    "lengthadjust",
    "method",
    "path",
    "side",
    "spacing",
    "startoffset",
    "textlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  polyline: [
    "points",
    "pathlength",
    ...coreAttributes,
    ...presentationAttributes,
  ],
  path: ["d", "pathlength", ...coreAttributes, ...presentationAttributes],
  /** X3D Tags */
  x3d: [
    "width",
    "height",
    "style",
    "primitivequality",
    "disabledoubleclick",
    "disabletouch",
    "disablerightdrag",
    "disableleftdrag",
    "disablemiddledrag",
    "disablekeys",
    "showtouchpoints",
  ],
  box: ["size", "solid"],
  cylinder: ["bottom", "height", "radius", "side", "solid", "top"],
  scene: [],
  shape: ["bboxcenter", "bboxsize"],
  appearance: [],
  imageTexture: ["scale", "url"],
  material: [
    "ambientIntensity",
    "diffusecolor",
    "emissivecolor",
    "shininess",
    "specularcolor",
    "transparency",
  ],
  cone: ["side", "solid", "height", "bottom", "bottomradius"],
  group: ["bboxcenter", "bboxsize"],
  transform: [
    "center",
    "rotation",
    "scale",
    "scaleorientation",
    "translation",
    "bboxcenter",
    "bboxsize",
  ],
  sphere: ["radius", "solid"],
};

export const mathSanitizeSchema: any = {
  ...defaultSchema,
  attributes: {
    ...defaultSchema.attributes,
    div: [
      ...(defaultSchema.attributes?.div ?? []),
      ...["class", "className", "math", "math-display", "mathDisplay", "style"],
    ],
    img: [...(defaultSchema.attributes?.div ?? []), ...["src", "style"]],
    math: [["xmlns", "http://www.w3.org/1998/Math/MathML"], "display"],
    annotation: ["encoding"],
    span: ["class", "className", "style"],
    svg: [
      ["xmlns", "http://www.w3.org/2000/svg"],
      "width",
      "height",
      "viewbox",
      "viewBox",
      "preserveAspectRatio",
      "preserveaspectratio",
      "x",
      "y",
      ...coreAttributes,
    ],
    ...customComponents,
  },
  tagNames: [
    ...(defaultSchema.tagNames ?? []),
    ...Object.keys(customComponents),
    "math",
    "semantics",
    "annotation",
    "mrow",
    "mi",
    "mo",
    "mfrac",
    "mn",
    "msup",
    "msub",
    "svg",
  ],
};

// I do this because it is required to dynamically import this
export default MarkdownRenderer;
